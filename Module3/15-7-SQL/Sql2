Functions: Compulsory return type

1) Agreegate Functions
MAX -> SELECT MAX(h_price) FROM products
MIN ->
SUM ->
AVG
COUNT
FIRST -> SELECT working_date FROM employee LIMIT 1;    
LAST -> SELECT * FROM products ORDER BY h_price DESC LIMIT 1;    

2) Scalar Functions

UCASE -> SELECT UCASE(NAME) FROM Students; 
LCASE ->
MID -> SELECT MID(NAME,1,4) FROM Students; 
LENGTH -> SELECT LENGTH(NAME) FROM Stuents;
ROUND -> SELECT ROUND(MARKS,0) FROM table_name; 
NOW ->  SELECT NAME, NOW() AS DateTime FROM Students; 
FORMAT -> SELECT NAME, FORMAT(Now(),'YYYY-MM-DD') AS Date FROM
Students; 


Procedure : May be there is a return type
Trigger

BEFORE INSERT
AFTER INSERT
BEFORE UPDATE
AFTER UPDATE
BEFORE DELETE
AFTER DELETE

JOIN:
INNER JOIN
LEFT JOIN
RIGHT JOIN
FULL JOIN

foreign key - index

procedure &function

DELIMITER //

CREATE PROCEDURE selectdata(INOUT myid int)

BEGIN

SELECT*FROM user WHERE id=myid;

END //

DELIMITER ;

SET @po='5';
CALL selectdata(@po);




update:

DELIMITER //

CREATE PROCEDURE selectdata(INOUT myid int)

BEGIN

UPDATE user set name='java' WHERE id=myid;

END //

DELIMITER ;



trigger
CREATE TRIGGER insetlog AFTER INSERT ON user FOR EACH ROW INSERT INTO person VALUES(null,'a','a')

steps:

1)CREATE DATABASE test;
CREATE TABLE `subscribers` (
  `id` int(11) NOT NULL,
  `fname` varchar(200) NOT NULL,
  `email` varchar(200) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
ALTER TABLE `subscribers` ADD PRIMARY KEY (`id`);
ALTER TABLE `subscribers` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1;

2)CREATE TABLE `audit_subscribers` (
  `id` int(11) NOT NULL,
  `subscriber_name` varchar(200) NOT NULL,
  `action_performed` varchar(400) NOT NULL,
  `date_added` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
ALTER TABLE `audit_subscribers` ADD PRIMARY KEY (`id`);
ALTER TABLE `audit_subscribers` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1;

3)
DELIMITER 

$$
CREATE TRIGGER `before_subscriber_insert` BEFORE INSERT ON 
`subscribers` FOR EACH ROW 


BEGIN
   
 INSERT INTO audit_subscribers
    SET action_performed  = 'Inserted a new subscriber',
    subscriber_name       =  new.fname;

END
$$


DELIMITER ;

4)
DELIMITER 
$$
CREATE TRIGGER `after_subscriber_delete` 
AFTER DELETE ON `subscribers` 
FOR EACH ROW 


BEGIN
    
INSERT INTO audit_subscribers
    SET action_performed  = 'Deleted a subscriber',
    subscriber_name =OLD.fname;

END
$$


DELIMITER ;

5)DELIMITER 

$$
CREATE TRIGGER `after_subscriber_edit` 
AFTER UPDATE ON `subscribers` 
FOR EACH ROW 

BEGIN
    
INSERT INTO audit_subscribers
 SET action_performed  = 'Updated a subscriber',
subscriber_name =  OLD.fname;

END
$$

DELIMITER ;


joins:


INNER JOIN	

SELECT column_name(s)
FROM table_name1
INNER JOIN table_name2 
ON table_name1.column_name=table_name2.column_name
*******************************************************************************************************
LEFT JOIN	

SELECT column_name(s)
FROM table_name1
LEFT JOIN table_name2 
ON table_name1.column_name=table_name2.column_name
*******************************************************************************************************
RIGHT JOIN	

SELECT column_name(s)
FROM table_name1
RIGHT JOIN table_name2 
ON table_name1.column_name=table_name2.column_name
*******************************************************************************************************
FULL JOIN	

SELECT column_name(s)
FROM table_name1
FULL JOIN table_name2 
ON table_name1.column_name=table_name2.column_name




